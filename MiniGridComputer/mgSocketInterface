#!/usr/bin/env python2.7

import socket
import getpass
import sys
import os
import signal

if len(sys.argv) != 2:
    print >> sys.stderr, sys.argv[0], "takes exactly one argument - the FIFO"
    sys.exit(-1)

# record the name of the FIFO we echo everything to
FIFO_NAME = sys.argv[1]

# set up the name of the socket that we want to use
FILE_ADDRESS = "/tmp/server-%s-sock" % getpass.getuser()

# set up clean up code using a signal handler
def signalHandler(sig, code):
    os.system("echo 'cleaning up socket interface'")
    if sock:
        sock.shutdown(socket.SHUT_RDWR)
        sock.close()
    os.unlink(FILE_ADDRESS)
    sys.exit(1)

# register signals
signal.signal(signal.SIGHUP, signalHandler)
signal.signal(signal.SIGINT, signalHandler)
signal.signal(signal.SIGTERM, signalHandler)
signal.signal(signal.SIGPIPE, signalHandler)


# create socket of type AF_UNIX
try:
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
except OSError, msg:
    print >> stderr, "Error opening stream socket: ", msg
    sys.exit(1)

# bind and listen for incoming connections
try:
    sock.bind(FILE_ADDRESS)
except OSError, msg:
    print >> stderr, "Error binding stream socket: ", msg
    sys.exit(1)

sock.listen(5)

# process connections as they come in
keepGoing = True
while keepGoing:
    try:
        msgsock, clientAddress = sock.accept()
    except OSError, msg:
        print >> sys.stderr, "Error from accept on stream socket: ", msg
        sys.exit(1)

    message = True
    while message and keepGoing:
        try:
            message = msgsock.recv(1024)
        except OSError, msg:
            print >> sys.stderr, "Error reading stream message: ", msg
            sys.exit(1)

        if message:
            # check if message is shutdown
            if message == "shutdown":
                keepGoing = False
            else:
                echo = "echo " + message + ">" + FIFO_NAME + "\n"
                os.system(echo)
    # close the message socket and go back to waiting on the stream socket
    msgsock.close()

os.kill(os.getpid(), signal.SIGTERM)